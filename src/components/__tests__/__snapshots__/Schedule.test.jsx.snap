exports[`<Schedule/> renders 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section>
    <h1>
        May 16
    </h1>
    <ReactSwipableView
        animateHeight={false}
        animateTransitions={true}
        axis="x"
        disabled={false}
        enableMouseEvents={false}
        hysteresis={0.6}
        ignoreNativeScroll={false}
        index={0}
        onChangeIndex={[Function]}
        resistance={false}
        springConfig={
            Object {
                "delay": "0s",
                "duration": "0.35s",
                "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
              }
        }
        threshold={5}>
        <Day
            events={undefined} />
        <Day
            events={undefined} />
        <Day
            events={undefined} />
        <Day
            events={undefined} />
        <Day
            events={undefined} />
    </ReactSwipableView>
</section>,
  "nodes": Array [
    <section>
      <h1>
            May 16
      </h1>
      <ReactSwipableView
            animateHeight={false}
            animateTransitions={true}
            axis="x"
            disabled={false}
            enableMouseEvents={false}
            hysteresis={0.6}
            ignoreNativeScroll={false}
            index={0}
            onChangeIndex={[Function]}
            resistance={false}
            springConfig={
                  Object {
                        "delay": "0s",
                        "duration": "0.35s",
                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                      }
            }
            threshold={5}>
            <Day
                  events={undefined} />
            <Day
                  events={undefined} />
            <Day
                  events={undefined} />
            <Day
                  events={undefined} />
            <Day
                  events={undefined} />
      </ReactSwipableView>
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Schedule />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Schedule {
        "_reactInternalInstance": [Circular],
        "changeTitle": [Function],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "title": "May 16",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <section>
          <h1>
                    May 16
          </h1>
          <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="x"
                    disabled={false}
                    enableMouseEvents={false}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    resistance={false}
                    springConfig={
                              Object {
                                        "delay": "0s",
                                        "duration": "0.35s",
                                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                                      }
                    }
                    threshold={5}>
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
          </ReactSwipableView>
</section>,
        "_debugID": 2,
        "_renderedOutput": <section>
          <h1>
                    May 16
          </h1>
          <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="x"
                    disabled={false}
                    enableMouseEvents={false}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    resistance={false}
                    springConfig={
                              Object {
                                        "delay": "0s",
                                        "duration": "0.35s",
                                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                                      }
                    }
                    threshold={5}>
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
                    <Day
                              events={undefined} />
          </ReactSwipableView>
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Schedule />,
}
`;
